{"version":3,"sources":["api/export/ExportService.js","components/export/export.jsx","App.js","serviceWorker.js","index.js"],"names":["exportObject","console","log","obj","forEach","value","key","JSON","stringify","axios","post","FirstComponent","props","exportDatabase","db1","exportObject1","Map","openRequest","indexedDB","open","onupgradeneeded","e","target","result","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","createIndex","unique","onsuccess","recipe","transaction","objectStore","item","name","emailId","task","created","Date","getTime","item2","getRequest","add","onerror","event","getRequest1","transaction1","objetStoreArray","i","length","exportObjectLength","storeName","getRequest2","getAll","myResult2","set","this","setState","exportObjectState","testFunction","bind","importDatabase","importObjectDataFromFile","window","File","FileReader","FileList","Blob","undefined","document","querySelector","files","alert","file","reader","type","match","onload","readAsText","clear","importDataStrToJson","parse","importObjectJsonToObject","Object","importObjectObjectToMap","keys","dataArray","get","message","state","clearDatabase","className","onClick","element","createElement","setAttribute","style","display","body","appendChild","click","removeChild","confirmAlert","title","buttons","label","Component","App","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.48dab86d.chunk.js","sourcesContent":["import axios from \"axios\"\n\nclass ExportService {\n\n    executeExportService(exportObject) {\n        console.log('executed hello world', exportObject);\n        let obj = {};\n        exportObject.forEach(function(value, key){\n            obj[key] = value\n        });\n        JSON.stringify(obj)\n        console.log(\"obj\",obj)\n        return axios.post(`http://localhost:8081/import-export/export`,obj);\n    }\n}\n\nexport default new ExportService()","import React, { Component } from 'react';\nimport ExportService from '../../api/export/ExportService.js';\nimport './export.css';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css\n\nexport default class FirstComponent extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            exportObjectState: {},\n            message: ''\n        }\n        this.exportDatabase = this.exportDatabase.bind(this);\n        this.testFunction = this.testFunction.bind(this);\n        this.importDatabase = this.importDatabase.bind(this);\n        this.clearDatabase = this.clearDatabase.bind(this);\n        // this.download = this.download.bind(this);\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div><h6>{this.state.message}</h6></div>\n                <h3>Export Data</h3>\n                Click here to export data <button type=\"button\" onClick={() => { this.exportDatabase(); }}>Export</button><br></br><br></br>\n                <br></br>\n                <hr></hr>\n                <h3>Clear Data</h3>\n                Click here to clear data <button type=\"button\" onClick={this.clearDatabase}>Clear Database</button>\n                <br></br>\n                <hr></hr>\n                <h3>Import Data</h3>\n                Upload a file :\n                <input type=\"file\" /><br></br><br></br>\n                <button type=\"button\" onClick={this.importDatabase}> Import</button>\n                <hr></hr>\n            </div>\n        );\n    }\n    exportDatabase = () => {\n        var exportObject1 = new Map();\n        var db1;\n        var storeOS;\n        var openRequest = indexedDB.open('fasp', 2);\n        openRequest.onupgradeneeded = function (e) {\n            var db1 = e.target.result;\n            if (!db1.objectStoreNames.contains('user1')) {\n                storeOS = db1.createObjectStore('user1', { keyPath: 'id', autoIncrement: true });\n                storeOS.createIndex(\"emailId\", \"emailId\", { unique: true });\n            }\n\n            if (!db1.objectStoreNames.contains('user')) {\n                storeOS = db1.createObjectStore('user', { keyPath: 'id', autoIncrement: true });\n                storeOS.createIndex(\"emailId\", \"emailId\", { unique: true });\n            }\n        };\n        openRequest.onsuccess = function (e) {\n            db1 = e.target.result;\n            // console.log(\"Db in success in list of receipe\", db1);\n            var transaction = db1.transaction(['user'], 'readwrite');\n            var recipe = transaction.objectStore('user');\n            // console.log(\"keyPath\",recipe.keyPath);\n            var item = {\n                name: 'test',\n                emailId: 'test@gmail.com',\n                task: \"\",\n                created: new Date().getTime()\n            };\n\n            var item2 = {\n                name: 'test1',\n                emailId: 'test1@gmail.com',\n                task: \"\",\n                created: new Date().getTime()\n            };\n\n            var getRequest = recipe.add(item);\n            // console.log(getRequest.result);\n\n            getRequest.onerror = function (event) {\n                // Handle errors!\n            };\n            getRequest.onsuccess = function (event) {\n            };\n\n            var getRequest1 = recipe.add(item2);\n            // console.log(getRequest.result);\n\n            getRequest1.onerror = function (event) {\n                // Handle errors!\n            };\n            getRequest1.onsuccess = function (event) {\n            };\n\n            var transaction1 = db1.transaction(db1.objectStoreNames, 'readwrite');\n            var objetStoreArray = [];\n\n            for (var i = 0; i < db1.objectStoreNames.length; i++) {\n                objetStoreArray[i] = db1.objectStoreNames[i];\n            }\n\n            var exportObjectLength = 0;\n            objetStoreArray.forEach(function (storeName) {\n                console.log(\"in for each\")\n                var recipe2 = transaction1.objectStore(storeName);\n                var getRequest2 = recipe2.getAll();\n                getRequest2.onsuccess = function (event) {\n                    var myResult2 = [];\n                    myResult2 = getRequest2.result;\n                    exportObject1.set(storeName, myResult2);\n                    console.log(\"in set state\")\n                    this.setState({ exportObjectState: exportObject1 })\n                    exportObjectLength = exportObjectLength + 1;\n                    console.log(\"exportObject1.length\", exportObjectLength)\n                    console.log(\"db1.objectStoreNames.length\", db1.objectStoreNames.length)\n                    if (exportObjectLength === db1.objectStoreNames.length) {\n                        this.testFunction();\n                    }\n                }.bind(this);\n            }.bind(this));\n            console.log(\"Test Function Call log\")\n        }.bind(this);\n        openRequest.onerror = function (e) {\n        };\n    }\n\n    testFunction() {\n        console.log(\"in statte\", this.state.exportObjectState)\n        // console.log('executed hello world', exportObject);\n        let obj = {};\n        var exportObj = this.state.exportObjectState;\n        exportObj.forEach(function (value, key) {\n            obj[key] = value\n        });\n        obj = JSON.stringify(obj)\n        console.log(\"obj\", obj);\n\n        var element = document.createElement('a');\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + obj);\n        element.setAttribute('download', \"exportData.txt\");\n\n        element.style.display = 'none';\n        document.body.appendChild(element);\n\n        element.click();\n\n        document.body.removeChild(element);\n        this.setState({\n            message: \"Data exported successfully\"\n        })\n        // download(\"hello.txt\", obj);\n        // ExportService.executeExportService(this.state.exportObjectState)\n        //     .then(response => {\n        //         console.log(response.data)\n        //         // var anchor = document.createElement('a');\n        //         // anchor.setAttribute('href', response.data);\n        //         // anchor.setAttribute('download', '');\n        //         // document.body.appendChild(anchor);\n        //         // anchor.click();\n        //         // anchor.parentNode.removeChild(anchor);\n        //     })\n        //     .catch(\n        //         error => {\n        //             console.log(error)\n        //         }\n        //     );\n    }\n\n    importDatabase = () => {\n        var importObjectDataFromFile = {};\n        if (window.File && window.FileReader && window.FileList && window.Blob) {\n            if (document.querySelector('input[type=file]').files[0] == undefined) {\n                alert(\"Please select a file\");\n            } else {\n                var file = document.querySelector('input[type=file]').files[0];\n\n                var reader = new FileReader()\n                var textFile = /text.*/;\n\n                if (file.type.match(textFile)) {\n                    reader.onload = function (event) {\n                        console.log(event.target.result);\n                        // var json = JSON.parse(event.target.result);\n                        importObjectDataFromFile = event.target.result;\n                        console.log(\"importObjectDataFromFile\", importObjectDataFromFile)\n                    }\n                }\n                reader.readAsText(file);\n                var db1;\n                // var storeOS;\n                var openRequest = indexedDB.open('fasp', 2);\n                openRequest.onsuccess = function (e) {\n                    db1 = e.target.result;\n                    var transaction1 = db1.transaction(db1.objectStoreNames, 'readwrite');\n                    var objetStoreArray = [];\n                    for (var i = 0; i < db1.objectStoreNames.length; i++) {\n                        objetStoreArray[i] = db1.objectStoreNames[i];\n                    }\n\n                    objetStoreArray.forEach(function (storeName) {\n                        var objectStore = transaction1.objectStore(storeName);\n                        var objectStoreRequest = objectStore.clear();\n                        objectStoreRequest.onsuccess = function (event) {\n                            var importDataStrToJson = JSON.parse(importObjectDataFromFile);\n                            var importObjectJsonToObject = new Object(importDataStrToJson);\n                            var importObjectObjectToMap = new Map();\n                            Object.keys(importObjectJsonToObject).forEach(key => {\n                                importObjectObjectToMap.set(key, importObjectJsonToObject[key]);\n                            });\n                            console.log(\"FinalMap\", importObjectObjectToMap)\n                            var dataArray = importObjectObjectToMap.get(storeName);\n                            console.log(\"dataArray\", dataArray);\n                            for (var i = 0; i < dataArray.length; i++) {\n                                objectStore.add(dataArray[i]);\n                            }\n                        }.bind(this);\n                        this.setState({\n                            message: \"Data imported successfully\"\n                        })\n                    }.bind(this));\n                }.bind(this);\n                openRequest.onerror = function (e) {\n                };\n            }\n        } else {\n            alert(\"Your browser is too old to support HTML5 File API\");\n        }\n    }\n\n\n\n    clearDatabase() {\n        confirmAlert({\n            title: 'Confirm to submit',\n            message: 'Are you sure you want to clear database?.',\n            buttons: [\n                {\n                    label: 'Yes',\n                    onClick: () => {\n                        var db1;\n                        // var storeOS;\n                        var openRequest = indexedDB.open('fasp', 2);\n                        openRequest.onsuccess = function (e) {\n                            db1 = e.target.result;\n                            var transaction1 = db1.transaction(db1.objectStoreNames, 'readwrite');\n                            var objetStoreArray = [];\n                            for (var i = 0; i < db1.objectStoreNames.length; i++) {\n                                objetStoreArray[i] = db1.objectStoreNames[i];\n                            }\n\n                            objetStoreArray.forEach(function (storeName) {\n                                var objectStore = transaction1.objectStore(storeName);\n                                var objectStoreRequest = objectStore.clear();\n                                objectStoreRequest.onsuccess = function (event) {\n                                }.bind(this);\n                            }.bind(this));\n                            this.setState({\n                                message: \"Data cleared successfully\"\n                            })\n                        }.bind(this);\n                        openRequest.onerror = function (e) {\n                        };\n                    }\n                },\n                {\n                    label: 'No',\n                    onClick: () => {\n                        this.setState({\n                            message: \"Action cancelled by user\"\n                        })\n                    }\n                }\n            ]\n        });\n    }\n}","import React from 'react';\nimport './App.css';\nimport FirstComponent from './components/export/export.jsx'\n\nfunction App() {\n  return (\n    <div className=\"LearningComponent\">\n        <br></br><center><h1>Import and export data in indexed db</h1><hr></hr></center>\n        <FirstComponent></FirstComponent>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}